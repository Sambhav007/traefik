# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
     varname: vic
 
stages:
- stage: Publish
  displayName: Publish of release pipeline
  jobs:
  - job: PreReleasePrepForhospitalMicroservice
    displayName: Pre Release Preparation (Bash build id and Publish for Release pipeline)
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
                      mkdir $(Agent.ToolsDirectory)/azcopy && cd "$_"
                      wget -O azcopy_v10.tar.gz https://aka.ms/downloadazcopy-v10-linux
                      tar -xf azcopy_v10.tar.gz --strip-components=1
                      $(Agent.ToolsDirectory)/azcopy/azcopy copy "https://erxstaticwebapp.blob.core.windows.net/pitstop-cicd/file?sp=r&st=2021-02-09T15:54:50Z&se=2021-02-09T23:54:50Z&spr=https&sv=2019-12-12&sr=b&sig=tXx%2FeVHWmQI3dOlCIyKcXbj6FYj%2BXdLJxcW71R%2BDFaQ%3D" "/home/vsts/work/1/s"
                      echo $(Agent.ToolsDirectory)
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          # Write your commands here
            comname:'caddy'
            IFS=',{}:".//'
            extfile=`cat '/home/vsts/work/1/s/file'`
            echo "$extfile"
            read -a strarr <<<"$extfile"
            keyName=${strarr[1]}
            echo "$keyName"
            keyNameVal=${strarr[3]}
            keyNameVal = ${keyNameVal}
            echo "$keyNameVal"  
            Var1=`echo $keyName | sed -e 's/^[[:space:]]*//'`
            Var2=`echo $keyNameVal | sed -e 's/^[[:space:]]*//'`
            echo "$Var1" 
            echo "$Var2"
            comname = `echo $keyNameVal | sed -e 's/^[[:space:]]*//'`
            echo $(comname)
            echo '$******************************'
            cat 'namespace.yaml'
            value=`cat 'namespace.yaml'`
            value=${value//##Namespace##/$Var2}
            echo "$value" > 'namespace_build.yaml'
            value1=`cat 'namespace_build.yaml'`
            echo "$value1"

            echo "$********************************"
            echo 'Hello world'           
            cat 'customermanagementapi-v1.yaml'
            echo 'Hello world 0'  
            value=`cat 'customermanagementapi-v1.yaml'`
            echo 'Hello world 0.25'  
            value=${value//##Namespace##/$Var2}
            echo "$value" > 'customermanagementapi_build.yaml'
            echo 'Hello world 1'  
            value1=`cat 'customermanagementapi_build.yaml'`
            echo 'Hello world 2'  
            echo "$value1"
            echo "$********************************"
            cat 'customertraefikroute.yaml'
            value=`cat 'customertraefikroute.yaml'`
            value=${value//##Namespace##/$Var2}
            echo "$value" > 'customertraefikroute_build.yaml'
            value1=`cat 'customertraefikroute_build.yaml'`
            echo "$value1"
            echo "$********************************"
            cat 'PVC.yaml'
            value=`cat 'PVC.yaml'`
            value=${value//##Namespace##/$Var2}
            echo "$value" > 'PVC_build.yaml'
            value1=`cat 'PVC_build.yaml'`
            echo "$value1"
            echo "$********************************"
            cat 'rabbitmq.yml'
            value=`cat 'rabbitmq.yml'`
            value=${value//##Namespace##/$Var2}
            echo "$value" > 'rabbitmq_build.yaml'
            value1=`cat 'rabbitmq_build.yaml'`
            echo "$value1"
            echo "$********************************"
            cat 'rabbitsvc.yml'
            value=`cat 'rabbitsvc.yml'`
            value=${value//##Namespace##/$Var2}
            echo "$value" > 'rabbitsvc_build.yaml'
            value1=`cat 'rabbitsvc_build.yaml'`
            echo "$value1"
            echo "$********************************"
            cat 'sqldeployment.yaml'
            value=`cat 'sqldeployment.yaml'`
            value=${value//##Namespace##/$Var2}
            echo "$value" > 'sqldeployment_build.yaml'
            value1=`cat 'sqldeployment_build.yaml'`
            echo "$value1"

            echo "$********************************"
            cat 'customer-secret.yaml'
            value=`cat 'customer-secret.yaml'`
            value=${value//##Namespace##/$Var2}
            echo "$value" > 'customer-secret_build.yaml'
            value1=`cat 'customer-secret_build.yaml'`
            echo "$value1"

            echo "$********************************"
            cat 'topsecret.yaml'
            value=`cat 'topsecret.yaml'`
            value=${value//##Namespace##/$Var2}
            echo "$value" > 'topsecret_build.yaml'
            value1=`cat 'topsecret_build.yaml'`
            echo "$value1"

            echo "$********************************"
            cat 'mssql-secret.yaml'
            value=`cat 'mssql-secret.yaml'`
            value=${value//##Namespace##/$Var2}
            echo "$value" > 'mssql-secret_build.yaml'
            value1=`cat 'mssql-secret_build.yaml'`
            echo "$value1"

            cat 'mssql-secret.yaml'
            value=`cat 'settings/appsettings_customersecret_gen.json'`
            value=${value//##Namespace##/$Var2}
            echo "$value" > 'settings/appsettings_customersecret.json'
            value1=`cat 'settings/appsettings_customersecret.json'`
            echo "$value1"
            mkdir 'traefikdata'  
            echo 'after creation of traefik'  
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Traefikcluster'
        command: 'apply'
        useConfigurationFile: true
        configuration: '/home/vsts/work/1/s/namespace_build.yaml'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
    
    
    - task: KubernetesManifest@0
      displayName: KubernetesManifestCreate Command
      inputs:
        
        action: 'createSecret'
        kubernetesServiceConnection: 'Traefikcluster'
        namespace: $(comname)
        secretType: 'generic'
        secretName: 'settingscustomerapi-appsettings'
        secretArguments: '--from-file=settings/appsettings_customersecret.json'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: ''
        artifact: 'traefikdata'
        publishLocation: 'pipeline'