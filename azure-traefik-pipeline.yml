# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'


stages:
- stage: Publish
  displayName: Publish of release pipeline
  jobs:
  - job: PreReleasePrepForTraefikAndAPI
    displayName: Pre Release Preparation (Publish for Release pipeline)
    steps:
   
    - task: PowerShell@2
      displayName: Download teectl for linux
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          
          wget -O teectl_v2.4.2_linux_amd64.tar.gz https://s3.amazonaws.com/traefikee/binaries/v2.4.2/teectl_v2.4.2_linux_amd64.tar.gz
          tar -xzvf teectl_v2.4.2_linux_amd64.tar.gz
         
  
    - task: Bash@3
      displayName: Install azcopy
      inputs:
        targetType: 'inline'
        script: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          mkdir $(Agent.ToolsDirectory)/azcopy
          wget -O $(Agent.ToolsDirectory)/azcopy/azcopy_v10.tar.gz https://aka.ms/downloadazcopy-v10-linux
          tar -xf $(Agent.ToolsDirectory)/azcopy/azcopy_v10.tar.gz -C $(Agent.ToolsDirectory)/azcopy --strip-components=1
          end=`date -u -d "180 minutes" '+%Y-%m-%dT%H:%MZ'`

          
        
    - task: AzureCLI@2
      displayName: Download using azcopy
      inputs:
        azureSubscription: 'traefikserviceconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 
          
          end=`date -u -d "180 minutes" '+%Y-%m-%dT%H:%MZ'`

          az storage blob generate-sas \
              --account-name erxstaticweb \
              --container-name pitstop-cicd \
              --name file \
              --permissions acdrw \
              --expiry $end \
              --auth-mode login \
              --as-user \
              --full-uri
          #sas=$(az storage share generate-sas -n pitstop-cicd --account-name erxstaticwebapp --https-only --permissions lr --expiry $end -o tsv)
          $(Agent.ToolsDirectory)/azcopy/azcopy copy "https://erxstaticwebapp.blob.core.windows.net/pitstop-cicd/file?sp=r&st=2021-02-15T05:41:35Z&se=2021-02-15T13:41:35Z&spr=https&sv=2019-12-12&sr=b&sig=wA8PPwpP1wITv7r0mXyzQl6ykVVAyEtRVp9yFPffViU%3D" "/home/vsts/work/1/s" --recursive
    
    - task: Bash@3
      displayName: Extract the namespace from blob file and replace in place of the placeholder in yaml files 
      inputs:
        targetType: 'inline'
        script: |
          # Write your commands here
            IFS=',{}:".//'
            extfile=`cat '/home/vsts/work/1/s/file'`
            echo "$extfile"
            read -a strarr <<<"$extfile"
            keyName=${strarr[1]}
            echo "$keyName"
            keyNameVal=${strarr[3]}
            keyNameVal = ${keyNameVal}
            #echo "$keyNameVal"  
            #Var1=`echo $keyName | sed -e 's/^[[:space:]]*//'`
            namespace=`echo $keyNameVal | sed -e 's/^[[:space:]]*//'`
            #echo "$Var1" 
            echo "$namespace"
            #echo '##vso[task.setvariable variable=Foo]$namespace'
            #FOO = ${namespace}
            #echo "$FOO"
            #FOO = 'kloss'
            #echo "$FOO"
            
            echo "******************************"
            #cat 'namespace.yaml'
            value=`cat 'namespace.yaml'`
            value=${value//##Namespace##/$namespace}
            echo "$value" > 'namespace_build.yaml'
            value1=`cat 'namespace_build.yaml'`
            echo "$value1"

            echo "******************************"
            echo 'Hello world'           
            cat 'customermanagementapi-v1.yaml'
            echo 'Hello world 0'  
            value=`cat 'customermanagementapi-v1.yaml'`
            echo 'Hello world 0.25'  
            value=${value//##Namespace##/$namespace}
            echo "$value" > 'customermanagementapi_build.yaml'
            echo 'Hello world 1'  
            value1=`cat 'customermanagementapi_build.yaml'`
            echo 'Hello world 2'  
            echo "$value1"

            echo "******************************"
            cat 'customertraefikroute.yaml'
            value=`cat 'customertraefikroute.yaml'`
            value=${value//##Namespace##/$namespace}
            echo "$value" > 'customertraefikroute_build.yaml'
            value1=`cat 'customertraefikroute_build.yaml'`
            echo "$value1"

            echo "******************************"
            cat 'PVC.yaml'
            value=`cat 'PVC.yaml'`
            value=${value//##Namespace##/$namespace}
            echo "$value" > 'PVC_build.yaml'
            value1=`cat 'PVC_build.yaml'`
            echo "$value1"

            echo "******************************"
            cat 'rabbitmq.yml'
            value=`cat 'rabbitmq.yml'`
            value=${value//##Namespace##/$namespace}
            echo "$value" > 'rabbitmq_build.yaml'
            value1=`cat 'rabbitmq_build.yaml'`
            echo "$value1"

            echo "******************************"
            cat 'rabbitsvc.yml'
            value=`cat 'rabbitsvc.yml'`
            value=${value//##Namespace##/$namespace}
            echo "$value" > 'rabbitsvc_build.yaml'
            value1=`cat 'rabbitsvc_build.yaml'`
            echo "$value1"

            echo "******************************"
            cat 'sqldeployment.yaml'
            value=`cat 'sqldeployment.yaml'`
            value=${value//##Namespace##/$namespace}
            echo "$value" > 'sqldeployment_build.yaml'
            value1=`cat 'sqldeployment_build.yaml'`
            echo "$value1"

             echo "******************************"
            cat 'middleware.yaml'
            value=`cat 'middleware.yaml'`
            value=${value//##Namespace##/$namespace}
            echo "$value" > 'middleware_build.yaml'
            value1=`cat 'middleware_build.yaml'`
            echo "$value1"

           
            mkdir 'traefikdata'  
            echo 'after creation of traefik'  

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 
        artifact: 'traefikdata'
        publishLocation: 'pipeline'